

function init(self)
  msg.post(".", "acquire_input_focus")

  self.undoLimit = 1 -- undo 下限
  self.redoLimit = 0 -- redo 上限
  self.cursor = 0 -- カーソル位置
  self.startFlag = false -- 環の要素があるかどうか

  -- 初期化
  math.randomseed(os.time())
  self.nodes = {}
  for i=1, 8, 1 do
    self.nodes[i] = { gui.get_node("part_"..i), gui.get_node("text_"..i) }
    gui.set_text(self.nodes[i][2], math.floor(math.random()*1000))
  end
end

function on_input(self, action_id, action)
  if not action.pressed or not action_id == hash("touch") then return end

  if gui.pick_node(gui.get_node("undoBtn"), action.x, action.y) then
    -- undo がクリックされた時
    if self.startFlag and not (self.cursor == self.undoLimit) then
      self.cursor = pre(self.cursor)
    end

  elseif gui.pick_node(gui.get_node("redoBtn"), action.x, action.y) then
    -- redo がクリックされた時
    if self.startFlag and not (self.cursor == self.redoLimit) then
      self.cursor = nex(self.cursor)
    end

  elseif gui.pick_node(gui.get_node("opeBtn"), action.x, action.y) then
    -- operate がクリックされた時

    -- redoLimit と cursor を進める
    self.cursor = nex(self.cursor)
    self.redoLimit = self.cursor

    -- 次の要素を表示する
    gui.set_color(self.nodes[self.cursor][2], vmath.vector4(gui.get_color(self.nodes[self.cursor][2]).x, gui.get_color(self.nodes[self.cursor][2]).y, gui.get_color(self.nodes[self.cursor][2]).z, 1))
    gui.play_flipbook(self.nodes[self.cursor][1], "parts_white")

    -- undo と redo が衝突したら undo も進める
    if self.startFlag and self.redoLimit == self.undoLimit then
      self.undoLimit = nex(self.undoLimit)
    end

    -- redoLimit から undoLimit までをリセット
    i = nex(self.redoLimit)
    while not (i == self.undoLimit) do
      gui.set_color(self.nodes[i][2], vmath.vector4(gui.get_color(self.nodes[i][2]).x, gui.get_color(self.nodes[i][2]).y, gui.get_color(self.nodes[i][2]).z, 0))
      gui.play_flipbook(self.nodes[i][1], "parts_gray")
      gui.set_text(self.nodes[i][2], math.floor(math.random()*1000)) -- 数値を更新
      i = nex(i)
    end

    self.startFlag = true --要素が1以上になったので true
  end

  if self.startFlag then reload(self) end --要素があるときは、更新
end

function reload(self)
  -- undo, redo, cursor を可視化する
  gui.set_color(gui.get_node("undo"), vmath.vector4(gui.get_color(gui.get_node("undo")).x, gui.get_color(gui.get_node("undo")).y, gui.get_color(gui.get_node("undo")).z, 1))
  gui.set_color(gui.get_node("redo"), vmath.vector4(gui.get_color(gui.get_node("redo")).x, gui.get_color(gui.get_node("redo")).y, gui.get_color(gui.get_node("redo")).z, 1))
  gui.set_color(gui.get_node("cursor"), vmath.vector4(gui.get_color(gui.get_node("cursor")).x, gui.get_color(gui.get_node("cursor")).y, gui.get_color(gui.get_node("cursor")).z, 1))

  -- undo, redo, cursor, display を更新する
  gui.set_rotation(gui.get_node("cursor"), vmath.vector3(0, 0, -45*(self.cursor-1)))
  gui.set_rotation(gui.get_node("undo"), vmath.vector3(0, 0, -45*(self.undoLimit-1)))
  if 3 <= self.undoLimit and self.undoLimit <= 6 then gui.play_flipbook(gui.get_node("undo"), "undo_bottom")
                                                 else gui.play_flipbook(gui.get_node("undo"), "undo_top") end
  gui.set_rotation(gui.get_node("redo"), vmath.vector3(0, 0, -45*(self.redoLimit-1)))
  if 3 <= self.redoLimit and self.redoLimit <= 6 then gui.play_flipbook(gui.get_node("redo"), "redo_bottom")
                                                 else gui.play_flipbook(gui.get_node("redo"), "redo_top") end
  gui.set_text(gui.get_node("display"), gui.get_text(self.nodes[self.cursor][2]))

end

function nex(idx) if idx == 8 then return 1 else return idx+1 end end -- 次の要素の idx を返す
function pre(idx) if idx == 1 then return 8 else return idx-1 end end -- 前の要素の idx を返す
